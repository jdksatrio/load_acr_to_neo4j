// prereq
CREATE CONSTRAINT scenario_id_unique IF NOT EXISTS FOR (s:Scenario) REQUIRE s.scenario_id_aux IS UNIQUE
CREATE CONSTRAINT variant_id_unique IF NOT EXISTS FOR (v:Variant) REQUIRE v.variant_id IS UNIQUE

// load the scenario entities
LOAD CSV WITH HEADERS
FROM 'file:///node_scenario.csv' AS row
FIELDTERMINATOR '|'
MERGE (s:Scenario {scenario_id_aux: toInteger(row.`scenario:ID`)})
  ON CREATE SET s.text = row.scenario;

// load the variant entities
LOAD CSV WITH HEADERS
FROM 'file:///node_variant.csv' AS row
FIELDTERMINATOR '|'
MERGE (v:Variant {variant_id: toInteger(row.`variant:ID`)})
  ON CREATE SET
    v.text = row.variant,
    v.age  = row.age,
    v.sex  = row.sex;

// load the scenario-variant relation
LOAD CSV WITH HEADERS
FROM 'file:///rel_scenario_variant.csv' AS row
FIELDTERMINATOR '|'
MATCH (s:Scenario  {scenario_id_aux: toInteger(row.`:START_ID(Scenario)`)})
MATCH (v:Variant   {variant_id     : toInteger(row.`:END_ID(Variant)`)})
MERGE (s)-[:HAS_VARIANT]->(v);

// For testing
MATCH (n1)-[r]->(n2) RETURN r, n1, n2 LIMIT 300
